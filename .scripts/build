#!/bin/sh

PROJECTS_DIR="$HOME/projects"
CONFIG_DIR="config"

#
# if called prints all arguments separated with space and exits.
#
function panic()
{
	echo "${argv[0]}: error:" $@ >&2 && exit 1
}

#
# If called prints warning provided as arguments on stderr.
#
function warning()
{
	echo "warning: ${argv[0]}:" $@ >&2
}

function get_project()
{
	check_project_error="Provide valid name of repository to build or move to git repository."

	if [ -z "$1" ]; then
		git status &>/dev/null
		test "$?" -eq 0 || panic "$check_project_error"
		repo="$(git rev-parse --show-toplevel)"
	else
		test ! -d "$PROJECTS_DIR/$1" && panic "$check_project_error"
		repo="$PROJECTS_DIR/$1"
	fi

	echo "$repo"
}

declare -A BUILD_OPTION=( [cmake]=0 [configure]=1)
function get_build_option()
{
	test -f "$1/CMakeLists.txt" && echo "${BUILD_OPTION[cmake]}" && exit 0
	test -f "$1/configure" && echo "${BUILD_OPTION[configure]}" && exit 0

	panic "Unable to recognize build option."
}

function get_build_dir()
{
	test -z $1 && panic "invalid call, provide repo name"
	cd "$1" || panic "Invalid directory"

	if [ -z "$2" ]; then
		to_create="$(git rev-parse --abbrev-ref HEAD 2>&1)"
		git status &>/dev/null || to_create=""
	else
		branches="$(git show-branch --all --list | cut -f2 -d "[" | cut -f1 -d"]")"
		to_create=""
		for i in $branches; do
			test $i = "$2" && to_create="$2" && break
		done

		test -z "$to_create" && panic "Invalid branch specified"
	fi

	test -z "$to_create" && echo "build" && exit 0

	echo "build-$to_create"
	exit 0
}

function checkout_branch()
{
	test -z $1 && panic "No repo specified."
	test -z $2 && exit 0

	cd $repo

	branches="$(git show-branch --all --list | cut -f2 -d "[" | cut -f1 -d"]")"
	branch=""
	for i in $branches; do
		test $i = "$2" && branch="$2" && break
	done

	test -z "$branch" && panic "Branch $2 is invalid."

	git checkout "$branch" &>/dev/null || panic "Unable to checkout branch $branch. Check the repository git: $repo"
}

function get_build_settings()
{
	test -z $1 && panic "Invalid call: no repo specified."
	name="$(echo $1 | sed -E 's/.*\/([^/]*)$/\1/')"
	test -f "$PROJECTS_DIR/$CONFIG_DIR/$name" && cat "$PROJECTS_DIR/$CONFIG_DIR/$name"
}

function build_project()
{
	option=$1
	test -z $option && option=${BUILD_OPTION[cmake]}
	build_settings=$(get_build_settings $repo)
	build_settings="$(eval echo $build_settings)"

	if [ "$option" = "${BUILD_OPTION[cmake]}" ]; then
		cmake .. $build_settings
		make -j$(echo "$(nproc)*2" | bc) install
		exit $?
	else
		panic "Not implemented option of build."
	fi
}

#function main()
{
	argv=($0 $@)

	repo="$(get_project ${argv[1]})"; test "$?" -eq 0 || exit $?
	build_option="$(get_build_option $repo)"; test "$?" -eq 0 || exit $?
	build_dir="$(get_build_dir $repo ${argv[2]})"; test "$?" -eq 0 || exit $?

	test ! -z ${argv[2]} && checkout_branch $repo "${argv[2]}"

	mkdir -p "$repo/$build_dir"
	cd "$repo/$build_dir" || panic "Unable to get into build directory."

	build_project "$build_option"

	exit 0
}
